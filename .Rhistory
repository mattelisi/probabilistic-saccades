print(alpha_d_HMC)
djnd <- read.table("./data/jnd_averaged",header=T,sep="\t")
djnd
knitr::opts_chunk$set(echo = TRUE, fig.path="./Figs/",message=FALSE,warning=FALSE)
rm(list=ls())
# load custom functions
# library(devtools)
# install_github("mattelisi/mlisi") # if not already installed
library(mlisi)
library(ggplot2) # nicer theme
nice_theme <- theme_bw()+theme(text=element_text(family="Helvetica",size=9),panel.border=element_blank(),strip.background = element_rect(fill="white",color="white",size=0),strip.text=element_text(size=rel(0.8)),panel.grid.major.x=element_blank(),panel.grid.major.y=element_blank(),panel.grid.minor=element_blank(),axis.line.x=element_line(size=.4),axis.line.y=element_line(size=.4),axis.text.x=element_text(size=7,color="black"),axis.text.y=element_text(size=7,color="black"),axis.line=element_line(size=.4), axis.ticks=element_line(color="black"))
# load data
d <- read.table("./data/exp1_saccade.txt",header=T,sep="\t")
# exclude secondary saccades and micro-saccades
d <- d[which(d$sacType==1),] # this include only the first large saccade leaving fixation area in each trial
d <- d[which(d$blink==0),] # remove trials with blinks
# prepare data
#d$tarX <- abs(d$ecc * d$side)
# any(is.na(d$tarX)) # sanity check
d$sacXresp <- abs(d$sacxOffset - d$sacxOnset)
ppd <- 50.1079 # pixel per degree conversion factor
d$sigma <- d$sigma / ppd
d$gain <- d$sacXresp/abs(d$ecc * d$side - d$sacxOnset)
d$sigmaf <- factor(round(d$sigma,digits=1))
# remove "DC component" as in van Opstal & van Gisbergen, 1989, Vision Research, "Scatter in the metrics of saccades and properties of the collicular map"
for(i in 1:nrow(d)){
d$sacxOffset[i] <- d$sacxOffset[i] - mean(d$sacxOnset[which(d$id==d$id[i] & d$session==d$session[i])],na.rm=T)
d$sacxOnset[i] <- d$sacxOnset[i] - mean(d$sacxOnset[which(d$id==d$id[i] & d$session==d$session[i])],na.rm=T)
d$sacyOffset[i] <- d$sacyOffset[i] - mean(d$sacyOnset[which(d$id==d$id[i] & d$session==d$session[i])],na.rm=T)
d$sacyOnset[i] <- d$sacyOnset[i] - mean(d$sacyOnset[which(d$id==d$id[i] & d$session==d$session[i])],na.rm=T)
}
# signed saccade error
d$tarX_s <- (d$ecc * d$side)
d$sacXresp_s <- (d$sacxOffset - d$sacxOnset)
d$sacErr <- sqrt((d$sacxOffset-d$tarX_s)^2 + d$sacyOffset^2)
## rt cut off
# sacOnse is measured with respect to target onset (this is what I want)
# sacRT wrt is with respect to the previous (micro)saccade
d$sacRT <- d$sacOnset
round(mean(d$sacRT<100,na.rm=T) * 100, digits=4) # this compute the percentage of excluded trials
d <- d[which(d$sacRT>=100),]
# mistakes (i.e. saccades in the wrong direction)
mean(sign(d$sacXresp_s) != sign(d$tarX_s),na.rm=T) * 100 # total prop. of directional errors
d$dir_errors <- sign(d$sacXresp_s) != sign(d$tarX_s)
tapply(d$dir_errors,list(d$sigmaf,d$id),mean,na.rm=T) * 100 # prop. of directional errors for each subject
# absolute error
round(mean(d$sacErr>(d$tarX-2),na.rm=T) * 100, digits=2)
d <- d[which(d$sacErr<(d$tarX-2)),]
# remove unrealistic values of peak velocities (about 0.02%) perhaps due to blinks during the saccade
mean(d$sacVPeak>5000,na.rm=T) * 100
d <- d[which(d$sacVPeak<5000),]
# adaptive amplitude filter
filter_group <- paste(d$id, d$sigmaf, d$tarX, sep="_")
out_index <- outfilter(d$sacXresp, filter_group, nsd=3)
round(length(out_index)/nrow(d) * 100,digits=2)
d <- d[-out_index,]
# normalize saccade responses; again as in van Opstal & van Gisbergen, 1989
d$sacXresp <- d$tarX * d$gain
# label sessions according to range of the targets
sess <- d$session
for(i in 1:nrow(d)){
c_i <- with(d[d$vp==d$vp[i] & d$id==d$id[i] & d$session==d$session[i],], (max(tarX)+min(tarX))/2)
sess[i] <- ifelse(c_i>10,"large",ifelse(c_i<10,"small",NA))
}
d$session_number <- d$session
d$session <- sess
# drop unnecessary columns
drops <- c("vp","sameDir","dir_errors","tedfFixOff","gap","sacRT_fd","vpcode","largebef","sacType","sacNumber","sacNumberAfterOnset","sacNumberAfterPrimary","tarx","tary","cxm","cym","tedfFix","tFix","tOn","tOff","tSac","sacAngle1","sacAmp","sacAngle2")
d <- d[ , !(names(d) %in% drops)]
str(d)
ggplot(d, aes(x=sacXresp,group=sigmaf,color=sigmaf))+geom_vline(aes(xintercept=tarX),color="black",lty=2,size=0.4)+ stat_ecdf(geom = "step",size=0.6)+facet_grid(tarX~.)+nice_theme+scale_color_manual(values=c("black","dark grey","blue"),name=expression(paste(sigma[blob], " [deg]")))+labs(y="cumulative probability",x="saccade amplitude [deg]")+scale_x_continuous(breaks=seq(5,13,1))+coord_cartesian(xlim=c(5.5,12.5))
dag <- aggregate(sacXresp ~ sigmaf+id +tarX  , d,  mean)
dag2 <- aggregate(sacXresp ~ sigmaf +tarX  , dag ,  mean)
dag2$sacXresp_se <- aggregate(sacXresp ~ sigmaf+tarX, dag,  bootMeanSE)$sacXresp
ggplot(dag2, aes(x=tarX,y=sacXresp,ymin=sacXresp-sacXresp_se,ymax=sacXresp+sacXresp_se,color=sigmaf,group=sigmaf))+geom_abline(intercept=0,slope=1,lty=2,size=0.2)+geom_errorbar(width=0,alpha=1)+geom_line()+geom_point(size=1.5)+nice_theme+labs(x="target distance [deg]", y="saccade amplitude [deg]")+scale_color_manual(values=c("black","dark grey","blue"),name=expression(paste(sigma[blob], " [deg]")))+scale_x_continuous(limits=c(7.5,12.5))+scale_y_continuous(limits=c(6.8,11.5))
dag <- aggregate(gain ~ sigmaf+sigma+id , d,  sd)
dag2 <- aggregate(gain ~ sigmaf+sigma , dag ,  mean)
dag2$gain_se <- aggregate(gain ~ sigmaf+sigma, dag,  bootMeanSE)$gain
ggplot(dag2, aes(x=sigma,y=gain,ymin=gain-gain_se,ymax=gain+gain_se,color=sigmaf,group=1))+geom_line(color="black")+geom_errorbar(width=0,alpha=1,color="black")+geom_point(size=2.3)+nice_theme+labs(x=expression(paste(sigma," [deg]")), y="saccade variability [gain SD]")+scale_color_manual(values=c("black","dark grey","blue"),guide=F)+scale_x_continuous(limits=c(0.2,1.61),breaks=c(0.3,0.9,1.5))
# This assign each observation to a quartile of individual latency distribution
d$RTbin <- NA
d$RTbin_mean <- NA
for(i in unique(d$id)){
for(s_i in unique(d$sigmaf)){
d$RTbin[d$id==i & d$sigmaf==s_i]<-cut(d$sacRT[d$id==i & d$sigmaf==s_i],breaks=quantile(d$sacRT[d$id==i & d$sigmaf==s_i]),labels=c("1st quartile","2nd quartile","3rd quartile","4th quartile"),names=T)
for(q_i in unique(d$RTbin[d$id==i & d$sigmaf==s_i])){
d$RTbin_mean[d$id==i & d$RTbin==q_i & d$sigmaf==s_i] <- mean(d$sacRT[d$id==i & d$RTbin==q_i & d$sigmaf==s_i],na.rm=T)
}
}
}
dag <- aggregate(cbind(gain,RTbin_mean) ~ sigmaf+id+ RTbin , d,  mean)
dag2 <- aggregate(cbind(gain, RTbin_mean) ~ sigmaf + RTbin , dag ,  mean)
dag2$se <- aggregate(gain ~ sigmaf + RTbin, dag,  bootMeanSE)$gain
dag2$rt_se <- aggregate(RTbin_mean ~ sigmaf + RTbin, dag,  bootMeanSE)$RTbin_mean
ggplot(dag2, aes(x=RTbin_mean,y=gain,ymin=gain-se,ymax=gain+se,color=sigmaf,group=sigmaf))+geom_hline(aes(yintercept=1),lty=2,size=0.4)+geom_errorbar(width=0,alpha=1)+geom_line()+geom_point(size=1.5)+nice_theme+labs(x="saccade latency [ms]", y="saccade gain")+scale_color_manual(values=c("black","dark grey","blue"),name=expression(paste(sigma[blob], " [deg]")))+scale_y_continuous(breaks=seq(0,1,0.05))+scale_x_continuous(breaks=seq(100,600,50))
summary(aov(gain~sigmaf+Error(id/sigmaf), aggregate(gain~sigmaf+sigma+id, d, sd)))
library(lme4)
m1 <- lmer(sacXresp ~ tarX * sigmaf + (tarX + sigmaf |id), d)
summary(m1)
# the change in undershoot bias is measured by the change in the LMM linear coefficient for each participants
gain_change <- fixef(m1)[6]+ranef(m1)$id[,4]
# sanity check: OK
#all(aggregate(gain ~ sigmaf+id, d[d$sigmaf=="1.5",],  sd)$id==row.names(ranef(m1)$id))
# the difference in variability is measured by the difference in variance between sigma=1.5 and sigma=0.3
var_increase <- aggregate(gain ~ sigmaf+id, d[d$sigmaf=="1.5",],  var)$gain - aggregate(gain ~ sigmaf+id, d[d$sigmaf=="0.3",],  var)$gain
# Pearson correlation
cor.test(var_increase, gain_change)
# ANOVA with gain as dependent variable
dag <- aggregate(gain ~ sigmaf+id + RTbin , d,  mean)
dag$RTbin <- factor(dag$RTbin)
summary(aov(gain~sigmaf*RTbin + Error(id/(sigmaf*RTbin)), dag ))
# ANOVA with gain SD as dependent variable
dag <- aggregate(gain ~ sigmaf+id + RTbin , d,  sd)
dag$RTbin <- factor(dag$RTbin)
summary(aov(gain~sigmaf*RTbin + Error(id/(sigmaf*RTbin)), dag ))
dag <- aggregate(sacXresp ~ sigmaf+sigma + session +tarX + id, d, mean)
l_sx <- with(dag,sacXresp[sigmaf=="0.3" & session=="large" & tarX==10])
s_sx <- with(dag,sacXresp[sigmaf=="0.3" & session=="small" & tarX==10])
t.test(l_sx-s_sx, var.equal=T)
summary(aov(sacXresp ~ sigma*session + Error(id/(sigmaf*session)), dag[dag$tarX==10,]))
# tapply(d$session_number, list(d$tarX, d$session, d$id),mean) # sanity check
# This implements the correction to adjust for baseline differences (see Material and Methods, main text)
d$sacXresp_c <- d$sacXresp
#barG <- mean(aggregate(gain ~ id, d[d$sigmaf=="0.3",], mean)$gain)
#Gs1 <- mean(aggregate(gain ~ id, d[d$sigmaf=="0.3" & d$session_number==1,], mean)$gain)
#Gs2 <- mean(aggregate(gain ~ id, d[d$sigmaf=="0.3" & d$session_number==2,], mean)$gain)
barG <- aggregate(gain ~ id, d[d$sigmaf=="0.3",], mean)
Gs1 <- aggregate(gain ~ id, d[d$sigmaf=="0.3" & d$session_number==1,], mean)
Gs2 <- aggregate(gain ~ id, d[d$sigmaf=="0.3" & d$session_number==2,], mean)
# for(i in 1:nrow(d)){
#     if(d$session_number[i]==1){
# 		d$sacXresp_c[i] <- d$sacXresp[i] * (1+barG-Gs1)
# 	}else{
# 		d$sacXresp_c[i] <- d$sacXresp[i] * (1+barG-Gs2)
# 	}
# }
for(i in 1:nrow(d)){
if(d$session_number[i]==1){
d$sacXresp_c[i] <- d$sacXresp[i] * (1+barG$gain[barG$id==d$id[i]]-Gs1$gain[Gs1$id==d$id[i]])
}else{
d$sacXresp_c[i] <- d$sacXresp[i] * (1+barG$gain[barG$id==d$id[i]]-Gs2$gain[Gs2$id==d$id[i]])
}
}
dag <- aggregate(cbind(sacXresp_c, sacXresp, gain) ~ tarX +sigmaf+sigma + session + id, d, mean)
dag$se <- aggregate(sacXresp_c ~ tarX +sigmaf +sigma + session + id, d, bootMeanSE)$sacXresp_c
# prepare the predictors for fitting the model
d$mean_ecc <- ifelse(d$session=="large",11,9)
d$cond1 <- dummy(d$sigmaf)[,"0.9"]
d$cond2 <- dummy(d$sigmaf)[,"1.5"]
d$ecc_diff <- d$mean_ecc - d$ecc
#--------------------------------------------------------------------------------------------#
### OLD CODE FOR FITTING THE MODEL WITH LMER (all conditions together) ###
# the problem with this are convergence warnings, one is forced to exclude higher-order
# interactions from the random effects
# compAlphas <- function(.) {
# tab <- summary(.)$coefficients
# a1 <- tab["ecc_diff",1] / tab["ecc",1]
# a2 <- (tab["ecc_diff",1]+tab["cond1:ecc_diff",1]) / (tab["ecc",1]+tab["ecc:cond1",1])
# a3 <- (tab["ecc_diff",1]+tab["cond2:ecc_diff",1]) / (tab["ecc",1]+tab["ecc:cond2",1])
# alphas <- c(a1,a2,a3)
# names(alphas) <- c("a1","a2","a3")
# return(alphas)
# }
# lmm0 <- lmer(sacXresp_c ~ ecc + cond1 + cond2 + ecc_diff + ecc:cond1 + ecc:cond2 + ecc_diff:cond1 + ecc_diff:cond2 + (ecc + cond1 + cond2 + ecc_diff + ecc:cond1 + ecc:cond2 + ecc_diff:cond1 + ecc_diff:cond2 || id), d)
# # + ecc_diff:cond1 + ecc_diff:cond2
# # , control=lmerControl(optCtrl =list(maxfun=1e30))
# compAlphas(lmm0)
#--------------------------------------------------------------------------------------------#
### OLD CODE FOR FITTING THE MODEL WITH LMER (split conditions) ###
# comp1Alpha <- function(.) {
#   tab <- summary(.)$coefficients
#   a1 <- tab["ecc_diff",1] / tab["ecc",1]
#   return(a1)
# }
# Workaround to the convergence warnings, however can't take correlation across
# conditions into account
# mm_a1 <- lmer(sacXresp_c ~ ecc + ecc_diff + (ecc + ecc_diff | id), d[d$sigmaf=="0.3",])
# comp1Alpha(mm_a1)
# boot_a1 <- bootMer(mm_a1, comp1Alpha, 1000,.progress="txt")
# mm_a2 <- lmer(sacXresp_c ~ ecc + ecc_diff + (ecc + ecc_diff | id), d[d$sigmaf=="0.9",])
# comp1Alpha(mm_a2)
# boot_a2 <- bootMer(mm_a2, comp1Alpha, 1000,.progress="txt")
# mm_a3 <- lmer(sacXresp_c ~ ecc + ecc_diff + (ecc + ecc_diff | id), d[d$sigmaf=="1.5",])
# comp1Alpha(mm_a3)
# boot_a3 <- bootMer(mm_a3, comp1Alpha, 500,.progress="txt")
# alpha_d <- data.frame(alpha=c(comp1Alpha(mm_a1),comp1Alpha(mm_a2),comp1Alpha(mm_a3)),
# sigma=sort(unique(d$sigma)),
# se = c(sd(boot_a1$t), sd(boot_a2$t), sd(boot_a3$t)),
# lb = c(quantile(boot_a1$t,prob=0.05/2), quantile(boot_a2$t,prob=0.05/2), quantile(boot_a3$t,prob=0.05/2)),
# ub = c(quantile(boot_a1$t,prob=1-0.05/2), quantile(boot_a2$t,prob=1-0.05/2), quantile(boot_a3$t,prob=1-0.05/2)))
# save(mm_a1, mm_a2, mm_a3, boot_a1, boot_a2, boot_a3, alpha_d, file="range_exp1.RData")
#load("range_exp1.RData")
#print(round(alpha_d, digits=2))
#--------------------------------------------------------------------------------------------#
### FIT INDIVIDUAL SUBJECTS SEPARATELY ###
# library(lme4)
# mList <- lmList(sacXresp_c ~ ecc + cond1 + cond2 + ecc_diff
#                         + ecc:cond1 + ecc:cond2
#                         + ecc_diff:cond1 + ecc_diff:cond2 | id, d[d$id!="mm",])
# tab_coeff <- coef(mList)
# tab_coeff$a1 <- tab_coeff$"ecc_diff" / tab_coeff$"ecc"
# tab_coeff$a2 <- (tab_coeff$"ecc_diff"+tab_coeff$"cond1:ecc_diff") / (tab_coeff$"ecc"+tab_coeff$"ecc:cond1")
# tab_coeff$a3 <- (tab_coeff$"ecc_diff"+tab_coeff$"cond2:ecc_diff") / (tab_coeff$"ecc"+tab_coeff$"ecc:cond2")
#
# mean(tab_coeff$a1)
# mean(tab_coeff$a2)
# mean(tab_coeff$a3)
# bootMeanCI(tab_coeff$a3)
#--------------------------------------------------------------------------------------------#
### SUBJECT BY SUBJECT FIT with alpha in (0,1) ###
# range effect analysis
# maximum likelihood function for fitting regression models at individual level
#
# this compute the predictions for a single conditions
# d$ecc0: the target distance at current trial
# d$mean_ecc: the distance at previous trial or the average distance in the session
# parameter vector p:
# p[1]: intercept
# p[2]: slope
# p[3]: mixing parameter (alpha)
# pred_single <- function(p, d){
# 	A <- p[1] + p[2] * (p[3]*d$tarX + (1-p[3])*d$mean_ecc)
# 	return(A)
# }
# this compute predictions for multiple comditions:
# - a baseline condition (sigma=0.3)
# - d$cond1: dummy variable that code for sigma=0.9
# - d$cond2: dummy variable that code for sigma=1.5
# parameter vector p:
# p[1]: intercept (sigma=0.3)
# p[2]: itercept_sig09 - intercept
# p[3]: itercept_sig15 - intercept
# p[4]: slope (sigma=0.3)
# p[5]: slope_sig09 - slope
# p[6]: slope_sig15 - slope
# p[7]: alpha (sigma=0.3)
# p[8]: alpha_sig09 		##- alpha
# p[9]: alpha_sig15 		##- alpha
# pred_multi <- function(p, d){
# 	beta_0 <- p[1] + p[2]*d$cond1 + p[3]*d$cond2
# 	beta_1 <- p[4] + p[5]*d$cond1 + p[6]*d$cond2
# 	alpha <- ifelse(d$cond1, p[8], ifelse(d$cond2, p[9], p[7]))
# 	A <- beta_0 + beta_1 * (alpha*d$mean_ecc + (1-alpha)*d$tarX)
# 	return(A)
# }
# loss function for optimization
# squared_loss_multi <- function(p, d){
# 	return(sum((d$sacXresp_c - pred_multi(p,d))^2))
# }
# wrapper for model fitting
# fit_single <- function(d){
# 	start_p <- c(0,0,0,1,0,0,1,0,0)
# 	lb <- c(-50,-50,-50,-5,-5,-5,0,0,0)
# 	ub <- c(50,50,50,5,5,5,1,1,1)
# 	m <- optim(par = start_p, squared_loss_multi, d=d, hessian=T, control=list(maxit=1e5), method="L-BFGS-B", lower=lb, upper=ub)
# 	# unconstrained
# 	#m <- optim(par = start_p, squared_loss_multi, d=d, hessian=T, control=list(maxit=1e8))
# 	par_names <- c("intercept","sig09","sig15","ecc0","ecc0_sig09","ecc0_sig15", "alpha_03", "alpha_09", "alpha_15")
# 	se_names <- paste(par_names,"_se",sep="")
# 	r_squared <- 1 - squared_loss_multi(m$par, d)/sum((d$sacXresp-mean(d$sacXresp))^2)
# 	r_squared_simple <- summary(lm(sacXresp_c ~ tarX + cond1 + cond2 + tarX:cond1 + tarX:cond2, d))$r.squared
# 	data.frame(matrix(data=c(m$par, sqrt(diag(solve(m$hessian))), r_squared, r_squared_simple), nrow=1, ncol=20, dimnames=list(NULL,c(par_names, se_names, "r.squared", "r.squared.simple"))))
# }
# do optimization subject by subject
# dfit2 <- {}
# for(i in unique(d$id)){
# 	dfit2 <- rbind(dfit2, fit_single(d[d$id==i,]))
# }
#
# mean(dfit2$alpha_03)
# bootMeanSE(dfit2$alpha_03)
# bootMeanCI(dfit2$alpha_03)
#
# mean(dfit2$alpha_09)
# bootMeanSE(dfit2$alpha_09)
# bootMeanCI(dfit2$alpha_09)
#
# mean(dfit2$alpha_15)
# bootMeanSE(dfit2$alpha_15)
# bootMeanCI(dfit2$alpha_15)
dag2 <- aggregate(sacXresp_c ~ tarX +sigmaf + session, dag, mean)
dag2$se <- aggregate(sacXresp_c ~ tarX +sigmaf + session, dag, bootMeanSE)$sacXresp_c
ggplot(dag2, aes(x=tarX,y=sacXresp_c,ymin=sacXresp_c-se,ymax=sacXresp_c+se,color=factor(session),group=session))+geom_abline(intercept=0,slope=1,lty=2,col="black",size=0.4)+geom_line()+geom_errorbar(width=0,alpha=1)+geom_point(pch=19)+nice_theme+scale_color_manual(values=c("black","dark grey"),name="eccentricity\nrange")+labs(x="target distance [deg]", y="saccade amplitude [deg]")+facet_grid(.~sigmaf)+scale_y_continuous(breaks=3:12,limits=c(6.8,11.5))
library(rstanarm)
# ecc_diff is the difference from the mean, \bar E - E_i
# cond1 and cond2 are dummy variables that indicate the conditions with sigma=0.9 and 1.5, respectively
## Set weakly informative priors.
#
# Thecoefficient of the model (fixed-effects) will be:
# [1] "(Intercept)"    "ecc"            "cond1"          "cond2"
# [5] "ecc_diff"       "ecc:cond1"      "ecc:cond2"      "cond1:ecc_diff"
# [9] "cond2:ecc_diff"
#
# The priors are normal, roughly based on the estimates of the linear model (m1) above
# but with quite large standard deviations.
# The prior for ecc_diff are weakly regularizing and centered on 0
# For example: the prior for the gain in the condition with smallest uncertainty
# is a Normal centered at 0.9, with a standard deviation of 1.5
weak_prior_intercept = normal(location=0, scale=3, autoscale=F)
#                                 2  3  4  5      6      7  8  9
weakPriors <- normal(location=c(0.9, 0, 1, 0, -0.05, -0.15, 0, 0),
scale =  c(1.5, 1, 1, 1,     1,     1, 2, 2), autoscale=F)
# I also set a weakly regularizing prior for the variance covariance matrix
# with regularization > 1 the mode of the prior is at the identity matrix
# e.g. see here: https://www.psychstatistics.com/2014/12/27/d-lkj-priors/
# weakVarCov <- lkj(regularization = 1.5) # cause problems, leave default
# fit the model (4 chains, 1000 samples each)
if(!file.exists("./data/exp1_rangeFit_v2.RData")){
lmm0_HMC <- stan_lmer(sacXresp_c ~ ecc + cond1 + cond2 + ecc_diff
+ ecc:cond1 + ecc:cond2
+ ecc_diff:cond1 + ecc_diff:cond2
+ (ecc + cond1 + cond2 + ecc_diff
+ ecc:cond1 + ecc:cond2
+ ecc_diff:cond1 + ecc_diff:cond2 | id),
data = d, cores = 6, iter = 500, chain=6,
prior = weakPriors,
prior_intercept = weak_prior_intercept)
# prior_summary(lmm0_HMC)$prior
save(lmm0_HMC, file="./data/exp1_rangeFit_v2.RData")
}else{
load("./data/exp1_rangeFit_v2.RData")
}
# this is just an helper function to extract the values of the compression parameter (alpha)
compAlphas_rstanarm <- function(.) {
tab <- fixef(.)
a1 <- tab["ecc_diff"] / tab["ecc"]
a2 <- (tab["ecc_diff"]+tab["cond1:ecc_diff"]) / (tab["ecc"]+tab["ecc:cond1"])
a3 <- (tab["ecc_diff"]+tab["cond2:ecc_diff"]) / (tab["ecc"]+tab["ecc:cond2"])
alpha <- c(a1,a2,a3)
cond <- c("a1","a2","a3")
post_samples <- as.data.frame(.)[,c("ecc_diff","ecc","cond1:ecc_diff","cond2:ecc_diff","ecc:cond1","ecc:cond2")]
post_samples$a1 <- post_samples$ecc_diff / post_samples$ecc
post_samples$a2 <- (post_samples$ecc_diff + post_samples$'cond1:ecc_diff') / (post_samples$ecc+post_samples$'ecc:cond1')
post_samples$a3 <- (post_samples$ecc_diff + post_samples$'cond2:ecc_diff') / (post_samples$ecc+post_samples$'ecc:cond2')
alpha_se <- c(sd(post_samples$a1), sd(post_samples$a2), sd(post_samples$a3))
CI_lb <- c(quantile(post_samples$a1, probs = 0.025,na.rm=T), quantile(post_samples$a2, probs = 0.025,na.rm=T), quantile(post_samples$a3, probs = 0.025,na.rm=T))
CI_ub <- c(quantile(post_samples$a1, probs = 0.975,na.rm=T), quantile(post_samples$a2, probs = 0.975,na.rm=T), quantile(post_samples$a3, probs = 0.975,na.rm=T))
out <- data.frame(cond, alpha, se=alpha_se, CI_lb, CI_ub)
return(out)
}
alpha_d_HMC <- compAlphas_rstanarm(lmm0_HMC)
alpha_d_HMC$sigmaf <- c("0.3","0.9","1.5")
alpha_d_HMC$sigma <- sort(unique(d$sigma))
ggplot(alpha_d_HMC, aes(x=sigma,y=alpha,ymin=alpha-se,ymax=alpha+se,group=1,color=sigmaf))+geom_hline(yintercept=0,lty=2,size=0.4)+geom_line(color="black")+geom_errorbar(width=0,alpha=1,color="black")+geom_point(size=2.3)+nice_theme+labs(x=expression(paste(sigma," [deg]")), y=expression(alpha))+scale_x_continuous(limits=c(0.2,1.7),breaks=c(0.3,0.9,1.5))+scale_color_manual(values=c("black","dark grey","blue"),guide=F)
print(alpha_d_HMC)
djnd <- read.table("./data/jnd_averaged",header=T,sep="\t")
djnd
djnd
aggregate(gain~condition+id,d[d$condition=="1.5",],mean)$jnd
aggregate(jnd~condition+id,d[d$condition=="1.5",],mean)$jnd
jnd_diff <- aggregate(jnd~condition+id,djnd[djnd$sigmaf=="0.3",],mean)$jnd - aggregate(jnd~condition+id,djnd[djnd$condition=="1.5",],mean)$jnd
aggregate(jnd~condition+id,djnd[djnd$condition=="0.3",],mean)$jnd
jnd_diff <- aggregate(jnd~condition+id,djnd[djnd$condition=="0.3",],mean)$jnd - aggregate(jnd~condition+id,djnd[djnd$condition=="1.5",],mean)$jnd
cor.test(tab_coeff$a3, jnd_diff)
tab_coeff <- coef(lmm0_HMC)$id
tab_coeff$a1 <- tab_coeff$"ecc_diff" / tab_coeff$"ecc"
tab_coeff$a2 <- (tab_coeff$"ecc_diff"+tab_coeff$"cond1:ecc_diff") / (tab_coeff$"ecc"+tab_coeff$"ecc:cond1")
tab_coeff$a3 <- (tab_coeff$"ecc_diff"+tab_coeff$"cond2:ecc_diff") / (tab_coeff$"ecc"+tab_coeff$"ecc:cond2")
gain_diff <- aggregate(gain~sigmaf+id,d[d$sigmaf=="0.3",],mean)$gain - aggregate(gain~sigmaf+id,d[d$sigmaf=="1.5",],mean)$gain
cor.test(tab_coeff$a3, jnd_diff)
plot(tab_coeff$a3, jnd_diff)
cor.test(gain_diff, jnd_diff)
plot(gain_diff, jnd_diff)
djnd <- read.table("./data/jnd_averaged",header=T,sep="\t")
jnd_diff <- aggregate(jnd~condition+id,djnd[djnd$condition=="1.5",],mean)$jnd - aggregate(jnd~condition+id,djnd[djnd$condition=="0.3",],mean)$jnd
cor.test(tab_coeff$a3, jnd_diff)
plot(gain_diff, jnd_diff)
tab_coeff$a_diff <-  tab_coeff$a3 -tab_coeff$a2
cor.test(tab_coeff$a_diff, gain_diff)
cor.test(tab_coeff$a_diff, gain_diff)
djnd <- read.table("./data/jnd_averaged",header=T,sep="\t")
jnd_diff <- aggregate(jnd~condition+id,djnd[djnd$condition=="1.5",],mean)$jnd - aggregate(jnd~condition+id,djnd[djnd$condition=="0.3",],mean)$jnd
cor.test(tab_coeff$a_diff, jnd_diff,alternative=)
plot(tab_coeff$a_diff, jnd_diff)
cor.test(tab_coeff$a_diff, jnd_diff,alternative="greater")
cor.test(tab_coeff$a3, jnd_diff,alternative="greater")
cor.test(tab_coeff$a3, djnd$jnd[djnd$condition=="0.3"],alternative="greater")
tab_coeff$a_diff <-  log(tab_coeff$a3 / tab_coeff$a2 )
cor.test(tab_coeff$a_diff, gain_diff)
cor.test(tab_coeff$a_diff, jnd_diff,alternative="greater")
cor.test(tab_coeff$a3, jnd_diff,alternative="greater")
knitr::opts_chunk$set(echo = TRUE, fig.path="./Figs/",message=FALSE,warning=FALSE)
rm(list=ls())
setwd("~/git_local/OSF_repo_probsaccades/")
library(mlisi)
d <- read.table("./data/saccades_xp123_allfit.txt",sep="\t",header=T)
source("asymCostFitFunctions_multi.R")
d$fit_level <- factor(paste(d$sess_n, d$posu,sep="_"))
d$id_i <- factor(paste(d$id, d$exp,sep="_"))
d$cond <- as.numeric(d$fit_level)
d$err_g <- d$gain - 1 # saccade error in gain units
dfit <- read.table("./fit_all_multi.txt")
dtestfit <- read.table("./test_fit_all_multi.txt")
library(ggplot2) # nicer theme
nice_theme <- theme_bw()+theme(text=element_text(family="Helvetica",size=9),panel.border=element_blank(),strip.background = element_rect(fill="white",color="white",size=0),strip.text=element_text(size=rel(0.8)),panel.grid.major.x=element_blank(),panel.grid.major.y=element_blank(),panel.grid.minor=element_blank(),axis.line.x=element_line(size=.4),axis.line.y=element_line(size=.4),axis.text.x=element_text(size=7,color="black"),axis.text.y=element_text(size=7,color="black"),axis.line=element_line(size=.4), axis.ticks=element_line(color="black"))
#pdf("predicted_gain_split.pdf",width=5,height=1.8)
ggplot(dfit, aes(x=ideal_gain,y=observed_gain,ymin=observed_gain-observed_gain_se,ymax=observed_gain+observed_gain_se,color=factor(posu),shape=session))+geom_abline(intercept=0,slope=1,lty=2,size=0.4)+geom_errorbar(width=0)+geom_point(size=1)+coord_equal(xlim=c(0.7,1.12),ylim=c(0.7,1.12))+scale_color_manual(values=c("black","dark grey","blue"),guide=F)+nice_theme+labs(x="predicted gain",y="observed gain")+facet_grid(.~exp)+scale_shape_manual(values=c(21,19,21,19))
#dev.off()
# plot individual fits with predictions
nd <- expand.grid(STD=seq(0.02,0.4,length.out=100),id.1=unique(dfit$id.1),gain=NA, KEEP.OUT.ATTRS = F)
R_i <- vector("numeric",length(unique(dfit$id.1)))
err_i <- vector("numeric",length(unique(dfit$id.1)))
alpha_i <- vector("numeric",length(unique(dfit$id.1)))
i_c <- 0
for(i in unique(dfit$id.1)){
i_c <- i_c + 1
a_i <- mean(dfit$alpha[dfit$id.1==i])
nd$gain[nd$id.1==i] <- 1+idealAimpoint_v(nd$STD[nd$id.1==i], a_i)
R_i[i_c] <- summary(lm(ideal_gain~observed_gain,dfit[dfit$id.1==i,]))$r.squared
err_i[i_c] <- with(dfit[dfit$id.1==i,], mean(abs(ideal_gain-observed_gain)))
alpha_i[i_c] <- mean(dfit$alpha[dfit$id.1==i])
}
names(R_i)<- unique(dfit$id.1)
names(err_i)<- unique(dfit$id.1)
nd$observed_gain <- nd$gain
nd$observed_gain_se <- NA
dfit$id_n <- paste(as.numeric(dfit$id.1)," (",substr(dfit$id.1,4,7),")",sep="")
nd$id_n <- paste(as.numeric(nd$id.1)," (",substr(nd$id.1,4,7),")",sep="")
#
dfit$id_n <- factor(dfit$id_n, unique(dfit$id_n)[order(alpha_i)],ordered=T)
nd$id_n <- factor(nd$id_n, unique(nd$id_n)[order(alpha_i)],ordered=T)
#pdf("all_individual_fits.pdf",width=6,height=5)
ggplot(dfit, aes(x=STD,y=observed_gain,color=factor(posu),shape=session))+geom_line(data=nd,aes(x=STD,y=gain,shape="large"),col="black")+geom_errorbar(aes(ymin=observed_gain-1.96*observed_gain_se,ymax=observed_gain+1.96*observed_gain_se),width=0)+geom_point(size=1)+scale_color_manual(values=c("black","dark grey","blue"),guide=F)+nice_theme+labs(x="gain variability [SD]",y="gain")+coord_cartesian(xlim=c(0.05,0.33),ylim=c(0.7,1.13))+scale_shape_manual(values=c(21,19,21,19),guide=F)+facet_wrap(~id_n, ncol=10)#+scale_x_log10()
#dev.off()
dfit
str(dfit)
selsjs <- c("10 (exp1)","1 (exp1)","25 (exp2)","15 (exp2)","39 (exp3)","21 (exp3)")
nd$id <- substr(nd$id.1,1,2)
#pdf("all_individual_fits.pdf",width=3,height=2.6)
ggplot(dfit[is.element(dfit$id_n,selsjs),], aes(x=observed_sd,y=observed_gain,color=factor(posu),shape=session))+geom_line(data=nd[is.element(nd$id_n,selsjs),],aes(x=STD,y=gain,shape="large"),col="black")+geom_errorbar(aes(ymin=observed_gain-1.96*observed_gain_se,ymax=observed_gain+1.96*observed_gain_se),width=0)+scale_color_manual(values=c("black","dark grey","blue"),guide=F)+nice_theme+labs(x="gain variability [SD]",y="gain")+scale_shape_manual(values=c(21,19,21,19),guide=F)+facet_wrap(~id_n, ncol=3)+coord_cartesian(xlim=c(0.05,0.23),ylim=c(0.7,0.95))+scale_x_continuous(breaks=seq(0,0.3,0.1))
#dev.off()
selsjs <- c("10 (exp1)","1 (exp1)","25 (exp2)","15 (exp2)","39 (exp3)","21 (exp3)")
nd$id <- substr(nd$id.1,1,2)
#pdf("all_individual_fits.pdf",width=3,height=2.6)
ggplot(dfit[is.element(dfit$id_n,selsjs),], aes(x=observed_sd,y=observed_gain,color=factor(posu),shape=session))+geom_line(data=nd[is.element(nd$id_n,selsjs),],aes(x=STD,y=gain,shape="large"),col="black")+geom_errorbar(aes(ymin=observed_gain-1.96*observed_gain_se,ymax=observed_gain+1.96*observed_gain_se),width=0)+geom_point(size=1)+scale_color_manual(values=c("black","dark grey","blue"),guide=F)+nice_theme+labs(x="gain variability [SD]",y="gain")+scale_shape_manual(values=c(21,19,21,19),guide=F)+facet_wrap(~id_n, ncol=3)+coord_cartesian(xlim=c(0.05,0.23),ylim=c(0.7,0.95))+scale_x_continuous(breaks=seq(0,0.3,0.1))
#+geom_errorbarh(aes(xmin=STD-1.96*STD_se,xmax=STD+1.96*STD_se),width=0)
#dev.off()
selsjs <- c("10 (exp1)","1 (exp1)","25 (exp2)","15 (exp2)","39 (exp3)","21 (exp3)")
nd$id <- substr(nd$id.1,1,2)
#pdf("all_individual_fits.pdf",width=3,height=2.6)
ggplot(dfit[is.element(dfit$id_n,selsjs),], aes(x=observed_sd,y=observed_gain,color=factor(posu),shape=session))+geom_line(data=nd[is.element(nd$id_n,selsjs),],aes(x=STD,y=gain,shape="large"),col="black")+geom_errorbarh(aes(xmin=STD-1.96*STD_se,xmax=STD+1.96*STD_se),width=0)+geom_errorbar(aes(ymin=observed_gain-1.96*observed_gain_se,ymax=observed_gain+1.96*observed_gain_se),width=0)+geom_point(size=1)+scale_color_manual(values=c("black","dark grey","blue"),guide=F)+nice_theme+labs(x="gain variability [SD]",y="gain")+scale_shape_manual(values=c(21,19,21,19),guide=F)+facet_wrap(~id_n, ncol=3)+coord_cartesian(xlim=c(0.05,0.23),ylim=c(0.7,0.95))+scale_x_continuous(breaks=seq(0,0.3,0.1))
#dev.off()
selsjs <- c("10 (exp1)","1 (exp1)","25 (exp2)","15 (exp2)","39 (exp3)","21 (exp3)")
nd$id <- substr(nd$id.1,1,2)
#pdf("all_individual_fits.pdf",width=3,height=2.6)
ggplot(dfit[is.element(dfit$id_n,selsjs),], aes(x=STD,y=observed_gain,color=factor(posu),shape=session))+geom_line(data=nd[is.element(nd$id_n,selsjs),],aes(x=STD,y=gain,shape="large"),col="black")+geom_errorbarh(aes(xmin=STD-1.96*STD_se,xmax=STD+1.96*STD_se),width=0)+geom_errorbar(aes(ymin=observed_gain-1.96*observed_gain_se,ymax=observed_gain+1.96*observed_gain_se),width=0)+geom_point(size=1)+scale_color_manual(values=c("black","dark grey","blue"),guide=F)+nice_theme+labs(x="gain variability [SD]",y="gain")+scale_shape_manual(values=c(21,19,21,19),guide=F)+facet_wrap(~id_n, ncol=3)+coord_cartesian(xlim=c(0.05,0.23),ylim=c(0.7,0.95))+scale_x_continuous(breaks=seq(0,0.3,0.1))
#dev.off()
knitr::opts_chunk$set(echo = TRUE, fig.path="./Figs/",message=FALSE,warning=FALSE)
rm(list=ls())
setwd("~/git_local/OSF_repo_probsaccades/")
library(mlisi)
d <- read.table("./data/saccades_xp123_allfit.txt",sep="\t",header=T)
source("asymCostFitFunctions_multi.R")
d$fit_level <- factor(paste(d$sess_n, d$posu,sep="_"))
d$id_i <- factor(paste(d$id, d$exp,sep="_"))
d$cond <- as.numeric(d$fit_level)
d$err_g <- d$gain - 1 # saccade error in gain units
dfit <- read.table("./fit_all_multi.txt")
dtestfit <- read.table("./test_fit_all_multi.txt")
library(ggplot2) # nicer theme
nice_theme <- theme_bw()+theme(text=element_text(family="Helvetica",size=9),panel.border=element_blank(),strip.background = element_rect(fill="white",color="white",size=0),strip.text=element_text(size=rel(0.8)),panel.grid.major.x=element_blank(),panel.grid.major.y=element_blank(),panel.grid.minor=element_blank(),axis.line.x=element_line(size=.4),axis.line.y=element_line(size=.4),axis.text.x=element_text(size=7,color="black"),axis.text.y=element_text(size=7,color="black"),axis.line=element_line(size=.4), axis.ticks=element_line(color="black"))
ggplot(dfit, aes(x=ideal_gain,y=observed_gain,ymin=observed_gain-observed_gain_se,ymax=observed_gain+observed_gain_se,color=factor(posu),shape=session))+geom_abline(intercept=0,slope=1,lty=2,size=0.4)+geom_errorbar(width=0)+geom_point(size=1)+coord_equal(xlim=c(0.7,1.12),ylim=c(0.7,1.12))+scale_color_manual(values=c("black","dark grey","blue"),guide=F)+nice_theme+labs(x="predicted gain",y="observed gain")+facet_grid(posu~exp)+scale_shape_manual(values=c(21,19,21,19))
#pdf("predicted_gain_split.pdf",width=5,height=1.8)
ggplot(dfit, aes(x=ideal_gain,y=observed_gain,ymin=observed_gain-observed_gain_se,ymax=observed_gain+observed_gain_se,color=factor(posu),shape=session))+geom_abline(intercept=0,slope=1,lty=2,size=0.4)+geom_errorbar(width=0)+geom_point(size=1)+coord_equal(xlim=c(0.7,1.12),ylim=c(0.7,1.12))+scale_color_manual(values=c("black","dark grey","blue"),guide=F)+nice_theme+labs(x="predicted gain",y="observed gain")+facet_grid(posu~exp)+scale_shape_manual(values=c(21,19,21,19))
#dev.off()
#pdf("predicted_gain_split.pdf",width=5,height=1.8)
ggplot(dfit, aes(x=ideal_gain,y=observed_gain,ymin=observed_gain-observed_gain_se,ymax=observed_gain+observed_gain_se,color=factor(posu),shape=session))+geom_abline(intercept=0,slope=1,lty=2,size=0.4)+geom_errorbar(width=0)+geom_point(size=1)+coord_equal(xlim=c(0.7,1.12),ylim=c(0.7,1.12))+scale_color_manual(values=c("black","dark grey","blue"),guide=F)+nice_theme+labs(x="predicted gain",y="observed gain")+facet_grid(.~posu)+scale_shape_manual(values=c(21,19,21,19))
#dev.off()
#pdf("predicted_gain_split.pdf",width=5,height=1.8)
ggplot(dfit, aes(x=ideal_gain,y=observed_gain,ymin=observed_gain-observed_gain_se,ymax=observed_gain+observed_gain_se,color=factor(posu),shape=session))+geom_abline(intercept=0,slope=1,lty=2,size=0.4)+geom_errorbar(width=0)+geom_point(size=1)+coord_equal(xlim=c(0.7,1.12),ylim=c(0.7,1.12))+scale_color_manual(values=c("black","dark grey","blue"),guide=F)+nice_theme+labs(x="predicted gain",y="observed gain")+facet_grid(exp~posu)+scale_shape_manual(values=c(21,19,21,19))
#dev.off()
#pdf("predicted_gain_split.pdf",width=5,height=1.8)
ggplot(dfit, aes(x=ideal_gain,y=observed_gain,ymin=observed_gain-observed_gain_se,ymax=observed_gain+observed_gain_se,color=factor(posu),shape=session))+geom_abline(intercept=0,slope=1,lty=2,size=0.4)+geom_errorbar(width=0)+geom_point()+coord_equal(xlim=c(0.7,1.12),ylim=c(0.7,1.12))+scale_color_manual(values=c("black","dark grey","blue"),guide=F)+nice_theme+labs(x="predicted gain",y="observed gain")+facet_grid(exp~posu)+scale_shape_manual(values=c(21,19,21,19))
#dev.off()
#pdf("predicted_gain_split.pdf",width=5,height=1.8)
ggplot(dfit, aes(x=ideal_gain,y=observed_gain,ymin=observed_gain-observed_gain_se,ymax=observed_gain+observed_gain_se,color=factor(posu),shape=session))+geom_abline(intercept=0,slope=1,lty=2,size=0.4)+geom_errorbar(width=0)+geom_point(size=0.5)+coord_equal(xlim=c(0.7,1.12),ylim=c(0.7,1.12))+scale_color_manual(values=c("black","dark grey","blue"),guide=F)+nice_theme+labs(x="predicted gain",y="observed gain")+facet_grid(exp~posu)+scale_shape_manual(values=c(21,19,21,19))
#dev.off()
#pdf("predicted_gain_split.pdf",width=5,height=1.8)
ggplot(dfit, aes(x=ideal_gain,y=observed_gain,ymin=observed_gain-observed_gain_se,ymax=observed_gain+observed_gain_se,color=factor(posu),shape=session))+geom_abline(intercept=0,slope=1,lty=2,size=0.4)+geom_errorbar(width=0)+geom_point(size=1)+coord_equal(xlim=c(0.7,1.12),ylim=c(0.7,1.12))+scale_color_manual(values=c("black","dark grey","blue"),guide=F)+nice_theme+labs(x="predicted gain",y="observed gain")+facet_grid(exp~posu)+scale_shape_manual(values=c(21,19,21,19))
#dev.off()
#pdf("predicted_gain_split.pdf",width=5,height=1.8)
ggplot(dfit, aes(x=ideal_gain,y=observed_gain,ymin=observed_gain-observed_gain_se,ymax=observed_gain+observed_gain_se,color=factor(posu),shape=session))+geom_abline(intercept=0,slope=1,lty=2,size=0.4)+geom_errorbar(width=0)+geom_point(size=1)+coord_equal(xlim=c(0.7,1.12),ylim=c(0.7,1.12))+scale_color_manual(values=c("black","dark grey","blue"),guide=F)+nice_theme+labs(x="predicted gain",y="observed gain")+scale_shape_manual(values=c(21,19,21,19))
#dev.off()
#pdf("predicted_gain_split.pdf",width=5,height=1.8)
ggplot(dfit, aes(x=ideal_gain,y=observed_gain,ymin=observed_gain-observed_gain_se,ymax=observed_gain+observed_gain_se,color=factor(posu),shape=session))+geom_abline(intercept=0,slope=1,lty=2,size=0.4)+geom_errorbar(width=0)+geom_point(size=1)+coord_equal(xlim=c(0.7,1.12),ylim=c(0.7,1.12))+scale_color_manual(values=c("black","dark grey","blue"),guide=F)+nice_theme+labs(x="predicted gain",y="observed gain")+facet_grid(exp~posu)+scale_shape_manual(values=c(21,19,21,19))
#dev.off()
pdf("predicted_gain_split.2.pdf",width=5,height=3)
ggplot(dfit, aes(x=ideal_gain,y=observed_gain,ymin=observed_gain-observed_gain_se,ymax=observed_gain+observed_gain_se,color=factor(posu),shape=session))+geom_abline(intercept=0,slope=1,lty=2,size=0.4)+geom_errorbar(width=0)+geom_point(size=1)+coord_equal(xlim=c(0.7,1.12),ylim=c(0.7,1.12))+scale_color_manual(values=c("black","dark grey","blue"),guide=F)+nice_theme+labs(x="predicted gain",y="observed gain")+facet_grid(exp~posu)+scale_shape_manual(values=c(21,19,21,19))
dev.off()
#pdf("predicted_gain_split.2.pdf",width=5,height=3)
ggplot(dfit, aes(x=ideal_gain,y=observed_gain,ymin=observed_gain-observed_gain_se,ymax=observed_gain+observed_gain_se,color=factor(posu),shape=session))+geom_abline(intercept=0,slope=1,lty=2,size=0.4)+geom_errorbar(width=0)+geom_point(size=1)+coord_equal(xlim=c(0.7,1.12),ylim=c(0.7,1.12))+scale_color_manual(values=c("black","dark grey","blue"),guide=F)+nice_theme+labs(x="predicted gain",y="observed gain")+facet_grid(exp~posu)+scale_shape_manual(values=c(21,"*",21,"*"))
#pdf("predicted_gain_split.2.pdf",width=5,height=3)
ggplot(dfit, aes(x=ideal_gain,y=observed_gain,ymin=observed_gain-observed_gain_se,ymax=observed_gain+observed_gain_se,color=factor(posu),shape=session))+geom_abline(intercept=0,slope=1,lty=2,size=0.4)+geom_errorbar(width=0)+geom_point(size=1)+coord_equal(xlim=c(0.7,1.12),ylim=c(0.7,1.12))+scale_color_manual(values=c("black","dark grey","blue"),guide=F)+nice_theme+labs(x="predicted gain",y="observed gain")+facet_grid(exp~posu)+scale_shape_manual(values=c("+","*","+","*"))
#dev.off()
#pdf("predicted_gain_split.2.pdf",width=5,height=3)
ggplot(dfit, aes(x=ideal_gain,y=observed_gain,ymin=observed_gain-observed_gain_se,ymax=observed_gain+observed_gain_se,color=factor(posu),shape=session))+geom_abline(intercept=0,slope=1,lty=2,size=0.4)+geom_errorbar(width=0)+geom_point(size=1)+coord_equal(xlim=c(0.7,1.12),ylim=c(0.7,1.12))+scale_color_manual(values=c("black","dark grey","blue"),guide=F)+nice_theme+labs(x="predicted gain",y="observed gain")+facet_grid(exp~posu)+scale_shape_manual(values=c(21,22,21,22))
#dev.off()
#pdf("predicted_gain_split.2.pdf",width=5,height=3)
ggplot(dfit, aes(x=ideal_gain,y=observed_gain,ymin=observed_gain-observed_gain_se,ymax=observed_gain+observed_gain_se,color=factor(posu),shape=session))+geom_abline(intercept=0,slope=1,lty=2,size=0.4)+geom_point(size=1)+coord_equal(xlim=c(0.7,1.12),ylim=c(0.7,1.12))+scale_color_manual(values=c("black","dark grey","blue"),guide=F)+nice_theme+labs(x="predicted gain",y="observed gain")+facet_grid(exp~posu)+scale_shape_manual(values=c(21,22,21,22))
#dev.off()
#pdf("predicted_gain_split.2.pdf",width=5,height=3)
ggplot(dfit, aes(x=ideal_gain,y=observed_gain,ymin=observed_gain-observed_gain_se,ymax=observed_gain+observed_gain_se,color=factor(posu),shape=session))+geom_abline(intercept=0,slope=1,lty=2,size=0.4)+geom_errorbar(width=0,color="grey")+geom_point(size=1)+coord_equal(xlim=c(0.7,1.12),ylim=c(0.7,1.12))+scale_color_manual(values=c("black","dark grey","blue"),guide=F)+nice_theme+labs(x="predicted gain",y="observed gain")+facet_grid(exp~posu)+scale_shape_manual(values=c(21,22,21,22))
#dev.off()
pdf("predicted_gain_split.3.pdf",width=5,height=3)
ggplot(dfit, aes(x=ideal_gain,y=observed_gain,ymin=observed_gain-observed_gain_se,ymax=observed_gain+observed_gain_se,color=factor(posu),shape=session))+geom_abline(intercept=0,slope=1,lty=2,size=0.4)+geom_errorbar(width=0,color="grey")+geom_point(size=1)+coord_equal(xlim=c(0.7,1.12),ylim=c(0.7,1.12))+scale_color_manual(values=c("black","dark grey","blue"),guide=F)+nice_theme+labs(x="predicted gain",y="observed gain")+facet_grid(exp~posu)+scale_shape_manual(values=c(21,22,21,22))
dev.off()
pdf("predicted_gain_split.4.pdf",width=5,height=3)
ggplot(dfit, aes(x=ideal_gain,y=observed_gain,ymin=observed_gain-observed_gain_se,ymax=observed_gain+observed_gain_se,color=factor(posu),shape=session))+geom_abline(intercept=0,slope=1,lty=2,size=0.4)+geom_errorbar(width=0)+geom_point(size=1)+coord_equal(xlim=c(0.7,1.12),ylim=c(0.7,1.12))+scale_color_manual(values=c("black","dark grey","blue"),guide=F)+nice_theme+labs(x="predicted gain",y="observed gain")+facet_grid(exp~posu)+scale_shape_manual(values=c(21,22,21,22))
dev.off()
#pdf("predicted_gain_split.4.pdf",width=5,height=3)
ggplot(dfit, aes(x=ideal_gain,y=observed_gain,ymin=observed_gain-observed_gain_se,ymax=observed_gain+observed_gain_se,color=factor(posu),shape=session))+geom_abline(intercept=0,slope=1,lty=2,size=0.4)+geom_errorbar(width=0)+geom_point(size=1)+coord_equal(xlim=c(0.7,1.12),ylim=c(0.7,1.12))+scale_color_manual(values=c("black","dark grey","blue"),guide=F)+nice_theme+labs(x="predicted gain",y="observed gain")+facet_grid(exp~posu)+scale_shape_manual(values=c(21,22,21,22))
#dev.off()
